[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 lmkknn.metrics authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2023). lmkknn.metrics: LM KKNN regression metrics. R package version 0.0.0.9000.","code":"@Manual{,   title = {lmkknn.metrics: LM and KKNN regression metrics},   author = {First Last},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/reference/create_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Model fit — create_fit","title":"Create Model fit — create_fit","text":"Create Model fit","code":""},{"path":"/reference/create_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Model fit — create_fit","text":"","code":"create_fit(model_recipe, model_spec, df)"},{"path":"/reference/create_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Model fit — create_fit","text":"model_recipe model recipe based predictors target variable model_spec model specification eventually fitted onto train/test data df dataframe preferably consists columns relevant entire regression model .e, target variable predictors","code":""},{"path":"/reference/create_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Model fit — create_fit","text":"model fit","code":""},{"path":"/reference/create_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Model fit — create_fit","text":"","code":"# Load data data(mtcars)  # Create a target dataset target_df <- target_df(mtcars, \"gear\", \"wt\", \"qsec\")  # Create recipe model_recipe <- create_recipe(target_df, \"gear\")  # Create model specification with kmin model_list <- list(\"mpg\", \"cyl\", \"disp\", \"hp\", \"am\") model_spec_kknn <- create_spec_kmin(target_df, model_recipe, \"kknn\", kmin=5, target_variable=\"gear\") model_spec_lm <- create_spec_kmin(target_df, model_recipe, \"lm\", target_variable=\"gear\")  # Get first item from model_spec_kknn list model_spec <- get_list_item(model_spec_kknn, 1)  # Fit model using kknn model_fit_kknn <- create_fit(model_recipe, model_spec, target_df)  # Get first item from model_spec_lm list model_spec <- get_list_item(model_spec_lm, 1)  # Fit model using lm model_fit_lm <- create_fit(model_recipe, model_spec, target_df)"},{"path":"/reference/create_metric_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataframe of performance metrics for a prediction model — create_metric_df","title":"Create a dataframe of performance metrics for a prediction model — create_metric_df","text":"function takes input two data frames: train_df test_df contain training test data prediction model, respectively. also takes character string specifying performance metric calculate \"metric\", character string specifying prediction model use \"method\", integer specifying minimum number neighbors consider using \"kknn\" method \"kmin\", character string specifying name target variable data frames target_variable, character vector specifying names predictor variables data frames \"predictors_vector\". function returns data frame containing specified performance metric, predictor variables, prediction model method, value kmin \"applicable\".","code":""},{"path":"/reference/create_metric_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataframe of performance metrics for a prediction model — create_metric_df","text":"","code":"create_metric_df(   train_df,   test_df,   metric,   method,   kmin = \"NA\",   target_variable,   predictors_vector )"},{"path":"/reference/create_metric_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dataframe of performance metrics for a prediction model — create_metric_df","text":"train_df data frame containing training data prediction model test_df data frame containing test data prediction model metric character string specifying performance metric calculate \"rmse\", \"rsq\", \"mae\" method character string specifying prediction model use lm\" \"kknn\" kmin integer specifying minimum number neighbors consider using \"kknn\" method  - ignored \"lm\" method used target_variable character string specifying name target variable data frames predictors_vector character vector specifying names predictor variables data frames","code":""},{"path":"/reference/create_metric_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dataframe of performance metrics for a prediction model — create_metric_df","text":"data frame containing specified performance metric, predictor variables, prediction model method, value kmin \"f applicable\"","code":""},{"path":"/reference/create_metric_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dataframe of performance metrics for a prediction model — create_metric_df","text":"function calculates specified performance metric :\"rmse\", \"rsq\", \"mae\" prediction model specified method argument: \"lm\" \"kknn\". method argument \"kknn\", function uses kmin argument determine minimum number neighbors consider \"kmin\" variable specified. kmin argument specified set \"NA\". function assumes target variable predictor variables already identified data","code":""},{"path":"/reference/create_metric_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dataframe of performance metrics for a prediction model — create_metric_df","text":"","code":"# Load data data(mtcars)  # Example 1: Using single variable regression with lm method train_df <- target_df(mtcars[1:16, ], 'gear', \"am\", \"vs\") test_df <- target_df(mtcars[17:32, ], 'gear', \"am\", \"vs\") create_metric_df(train_df, test_df, metric = \"rmse\", method = \"lm\", target_variable = \"gear\", predictors_vector = \"am\") #>   outcome predictor metric metric_value method kmin #> 1    gear        am   rmse    0.5899178     lm   NA  # Example 2: Using k-nearest neighbor method with optimal k create_metric_df(train_df, test_df, metric = \"mae\", method = \"kknn\", kmin = 3, target_variable = \"gear\", predictors_vector = c(\"am\", \"vs\")) #>   outcome predictor metric metric_value method kmin #> 1    gear   am + vs    mae    0.3541667   kknn    3"},{"path":"/reference/create_model_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Create prediction model — create_model_prediction","title":"Create prediction model — create_model_prediction","text":"Create prediction model","code":""},{"path":"/reference/create_model_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create prediction model — create_model_prediction","text":"","code":"create_model_prediction(target_test_df, model_fit)"},{"path":"/reference/create_model_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create prediction model — create_model_prediction","text":"target_test_df dataframe columns relevant regression model, .e., target variable predictors model_fit \"workflow\" class object generated create_fit function","code":""},{"path":"/reference/create_model_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create prediction model — create_model_prediction","text":"dataframe predicted values appended target_test_df","code":""},{"path":"/reference/create_model_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create prediction model — create_model_prediction","text":"","code":"train_df <- target_df(mtcars[1:16, ], 'gear', c(\"am\", \"vs\")) test_df <- target_df(mtcars[17:32, ], 'gear', c(\"am\", \"vs\")) x_recipe <- create_recipe(train_df, target_variable=\"gear\") x_spec_list <- create_spec_kmin(train_df, model_recipe=x_recipe, method=\"lm\", target_variable=\"gear\") x_spec <- get_list_item(x_spec_list, n=1) x_fit <- create_fit(x_recipe, x_spec, train_df) create_model_prediction(test_df, x_fit ) #>                   gear am vs    .pred #> Chrysler Imperial    3  0  0 3.052632 #> Fiat 128             4  1  1 4.368421 #> Honda Civic          4  1  1 4.368421 #> Toyota Corolla       4  1  1 4.368421 #> Toyota Corona        3  0  1 3.605263 #> Dodge Challenger     3  0  0 3.052632 #> AMC Javelin          3  0  0 3.052632 #> Camaro Z28           3  0  0 3.052632 #> Pontiac Firebird     3  0  0 3.052632 #> Fiat X1-9            4  1  1 4.368421 #> Porsche 914-2        5  1  0 3.815789 #> Lotus Europa         5  1  1 4.368421 #> Ford Pantera L       5  1  0 3.815789 #> Ferrari Dino         5  1  0 3.815789 #> Maserati Bora        5  1  0 3.815789 #> Volvo 142E           4  1  1 4.368421"},{"path":"/reference/create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe object for modeling — create_recipe","title":"Create a recipe object for modeling — create_recipe","text":"function creates recipe object modeling based specified target variable predictors.","code":""},{"path":"/reference/create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe object for modeling — create_recipe","text":"","code":"create_recipe(target_df, target_variable)"},{"path":"/reference/create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe object for modeling — create_recipe","text":"target_df data frame containing target variable predictors. target_variable string specifying name target variable.","code":""},{"path":"/reference/create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe object for modeling — create_recipe","text":"recipe object modeling.","code":""},{"path":"/reference/create_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a recipe object for modeling — create_recipe","text":"","code":"data(\"mtcars\") target_df <- target_df(mtcars, \"gear\", mpg, cyl, disp) recipe <- create_recipe(target_df, \"gear\")"},{"path":"/reference/create_spec_kmin.html","id":null,"dir":"Reference","previous_headings":"","what":"Create model specification with optional kmin tuning — create_spec_kmin","title":"Create model specification with optional kmin tuning — create_spec_kmin","text":"function creates model specification either linear regression k-nearest neighbor regression, optional kmin tuning latter. kmin specified, function performs grid search find optimal k value gives minimum root mean squared error (RMSE) 5-fold cross-validation training data.","code":""},{"path":"/reference/create_spec_kmin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create model specification with optional kmin tuning — create_spec_kmin","text":"","code":"create_spec_kmin(   df,   model_recipe,   method,   kmin = \"NA\",   metric,   target_variable,   weight_func = \"rectangular\",   mode = \"regression\" )"},{"path":"/reference/create_spec_kmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create model specification with optional kmin tuning — create_spec_kmin","text":"df data frame containing training data. model_recipe recipe object created using create_recipe function. method character string indicating type regression method used: \"lm\" linear regression \"kknn\" k-nearest neighbor regression. kmin numeric value specifying minimum number neighbors considered performing k-nearest neighbor regression. set \"NA\", function performs grid search find optimal k value. Default \"NA\". metric character string specifying performance metric calculate (\"rmse\", \"rsq\", \"mae\") target_variable character string indicating name target variable predicted. weight_func character string indicating weight function used k-nearest neighbor regression. Default \"rectangular\". mode character string indicating type regression task. Default \"regression\".","code":""},{"path":"/reference/create_spec_kmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create model specification with optional kmin tuning — create_spec_kmin","text":"list containing model specification kmin value (applicable).","code":""},{"path":"/reference/create_spec_kmin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create model specification with optional kmin tuning — create_spec_kmin","text":"","code":"train_df <- mtcars[1:16, ] target_df <- target_df(train_df, \"gear\") model_recipe <- create_recipe(target_df, \"gear\") create_spec_kmin(train_df, model_recipe, \"lm\", metric=\"rmse\", target_variable=\"gear\") #> [[1]] #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>  #>  #> [[2]] #> [1] \"NA\" #>  create_spec_kmin(train_df, model_recipe, \"kknn\", metric=\"rmse\", kmin=5, target_variable=\"gear\") #> [[1]] #> K-Nearest Neighbor Model Specification (regression) #>  #> Main Arguments: #>   neighbors = kmin #>   weight_func = weight_func #>  #> Computational engine: kknn  #>  #>  #> [[2]] #> [1] 5 #>"},{"path":"/reference/get_list_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Get List Item — get_list_item","title":"Get List Item — get_list_item","text":"function retrieves nth element given list.","code":""},{"path":"/reference/get_list_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get List Item — get_list_item","text":"","code":"get_list_item(list_object, n)"},{"path":"/reference/get_list_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get List Item — get_list_item","text":"list_object list. n index element retrieve.","code":""},{"path":"/reference/get_list_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get List Item — get_list_item","text":"nth element input list.","code":""},{"path":"/reference/get_list_item.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get List Item — get_list_item","text":"","code":"my_list <- list(a = 1, b = 2, c = 3) get_list_item(my_list, 2) #> [1] 2"},{"path":"/reference/get_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metric from a prediction model — get_metric","title":"Get metric from a prediction model — get_metric","text":"Extracts specified metric prediction model.","code":""},{"path":"/reference/get_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metric from a prediction model — get_metric","text":"","code":"get_metric(prediction_model, metric, target_variable)"},{"path":"/reference/get_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metric from a prediction model — get_metric","text":"prediction_model dataframe predicted values appended target_test_df. metric name metric assess performance prediction model. Supported metrics include \"rmse\", \"rsq\", \"mae\". target_variable name target variable prediction model.","code":""},{"path":"/reference/get_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metric from a prediction model — get_metric","text":"specified metric value.","code":""},{"path":"/reference/get_metric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metric from a prediction model — get_metric","text":"","code":"train_df <- target_df(mtcars[1:16, ], 'gear', c(\"am\", \"vs\")) test_df <- target_df(mtcars[17:32, ], 'gear', c(\"am\", \"vs\")) x_recipe <- create_recipe(train_df, target_variable=\"gear\") x_spec_list <- create_spec_kmin(train_df, model_recipe=x_recipe, method=\"lm\", target_variable=\"gear\") x_spec <- get_list_item(x_spec_list, n=1) x_fit <- create_fit(x_recipe, x_spec, train_df) prediction_model <- create_model_prediction(test_df, x_fit ) get_metric(prediction_model, \"rmse\", \"gear\") #> [1] 0.6646039"},{"path":"/reference/metric_bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind metric result data frames using rbindlist function — metric_bind","title":"Bind metric result data frames using rbindlist function — metric_bind","text":"function binds together data frames created create_metric_df() function using rbindlist() function data.table package. data frames created fitting linear models training data using predictor variables provided model_list, calculating specified metric test data.","code":""},{"path":"/reference/metric_bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind metric result data frames using rbindlist function — metric_bind","text":"","code":"metric_bind(   train_df,   test_df,   metric,   method,   kmin = \"NA\",   target_variable,   model_list )"},{"path":"/reference/metric_bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind metric result data frames using rbindlist function — metric_bind","text":"train_df data frame containing training data test_df data frame containing test data metric character string indicating metric calculated. Possible values \"rmse\", \"mae\", \"r2\" method character string indicating type model fitted. Possible values \"lm\" (linear regression) \"glm\" (generalized linear models). kmin integer indicating minimum value k k-fold cross-validation. set \"NA\", cross-validation performed. target_variable character string indicating name target variable. model_list list containing names predictor variables used linear models.","code":""},{"path":"/reference/metric_bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind metric result data frames using rbindlist function — metric_bind","text":"data frame containing metric results predictor variable.","code":""},{"path":"/reference/metric_bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind metric result data frames using rbindlist function — metric_bind","text":"","code":"# load data data(mtcars)  train_df <- mtcars[1:16, ] test_df <- mtcars[17:32, ]  single_predictors <- list(\"mpg\", \"cyl\", \"disp\", \"hp\", \"am\") multiple_predictors <- list(c(\"mpg\", \"cyl\"), c(\"disp\", \"am\"), c(\"cyl\", \"am\") )  # Single predictor lm regression model metric_bind(train_df=train_df, test_df=test_df, metric=\"rmse\", method=\"lm\", kmin=\"NA\", target_variable='gear', model_list=single_predictors) #>    outcome predictor metric metric_value method kmin #> 1:    gear       mpg   rmse    0.8595481     lm   NA #> 2:    gear       cyl   rmse    0.8876402     lm   NA #> 3:    gear      disp   rmse    0.8426984     lm   NA #> 4:    gear        hp   rmse    1.1698191     lm   NA #> 5:    gear        am   rmse    0.5899178     lm   NA  # Single predictor kknn regression model metric_bind(train_df=train_df, test_df=test_df, metric=\"rmse\", method=\"kknn\", kmin=4, target_variable='gear', model_list=single_predictors) #>    outcome predictor metric metric_value method kmin #> 1:    gear       mpg   rmse    0.9291293   kknn    4 #> 2:    gear       cyl   rmse    0.8860904   kknn    4 #> 3:    gear      disp   rmse    0.8660254   kknn    4 #> 4:    gear        hp   rmse    1.0532687   kknn    4 #> 5:    gear        am   rmse    0.7126096   kknn    4 # Multiple predictors lm regression model metric_bind(train_df=train_df, test_df=test_df, metric=\"rmse\", method=\"lm\", kmin=\"NA\", target_variable='gear', model_list=multiple_predictors) #>    outcome predictor metric metric_value method kmin #> 1:    gear mpg + cyl   rmse    0.8839327     lm   NA #> 2:    gear disp + am   rmse    0.7345654     lm   NA #> 3:    gear  cyl + am   rmse    0.7427264     lm   NA  # Multiple predictors kknn regression model metric_bind(train_df=train_df, test_df=test_df, metric=\"rmse\", method=\"kknn\", kmin=8, target_variable='gear', model_list=multiple_predictors) #>    outcome predictor metric metric_value method kmin #> 1:    gear mpg + cyl   rmse    0.9153637   kknn    8 #> 2:    gear disp + am   rmse    0.7673768   kknn    8 #> 3:    gear  cyl + am   rmse    0.8483670   kknn    8"},{"path":"/reference/str_collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse string of arguments and join them by '+' — str_collapse","title":"Collapse string of arguments and join them by '+' — str_collapse","text":"Collapse string arguments join '+'","code":""},{"path":"/reference/str_collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse string of arguments and join them by '+' — str_collapse","text":"","code":"str_collapse(str_vector)"},{"path":"/reference/str_collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse string of arguments and join them by '+' — str_collapse","text":"str_vector vector strings collapsed","code":""},{"path":"/reference/str_collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse string of arguments and join them by '+' — str_collapse","text":"string input parameters combined string, separated '+'","code":""},{"path":"/reference/str_collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse string of arguments and join them by '+' — str_collapse","text":"","code":"str_collapse(\"my name\") #> [1] \"my name\" str_collapse(c(\"my name\", \"is\", \"jake\")) #> [1] \"my name + is + jake\" str_collapse(c(\"my name\", \"is\", 2)) #> [1] \"my name + is + 2\" str_collapse(c(3, 2, \"boy\")) #> [1] \"3 + 2 + boy\""},{"path":"/reference/target_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Selects target variable and additional columns from a dataframe — target_df","title":"Selects target variable and additional columns from a dataframe — target_df","text":"Selects target variable additional columns dataframe","code":""},{"path":"/reference/target_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selects target variable and additional columns from a dataframe — target_df","text":"","code":"target_df(df, target_variable, ...)"},{"path":"/reference/target_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selects target variable and additional columns from a dataframe — target_df","text":"df dataframe target_variable character string representing target variable ... additional columns select dataframe","code":""},{"path":"/reference/target_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selects target variable and additional columns from a dataframe — target_df","text":"dataframe target variable additional columns selected","code":""},{"path":"/reference/target_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selects target variable and additional columns from a dataframe — target_df","text":"","code":"# Selecting only the target variable target_df(mtcars, \"mpg\") #>                      mpg #> Mazda RX4           21.0 #> Mazda RX4 Wag       21.0 #> Datsun 710          22.8 #> Hornet 4 Drive      21.4 #> Hornet Sportabout   18.7 #> Valiant             18.1 #> Duster 360          14.3 #> Merc 240D           24.4 #> Merc 230            22.8 #> Merc 280            19.2 #> Merc 280C           17.8 #> Merc 450SE          16.4 #> Merc 450SL          17.3 #> Merc 450SLC         15.2 #> Cadillac Fleetwood  10.4 #> Lincoln Continental 10.4 #> Chrysler Imperial   14.7 #> Fiat 128            32.4 #> Honda Civic         30.4 #> Toyota Corolla      33.9 #> Toyota Corona       21.5 #> Dodge Challenger    15.5 #> AMC Javelin         15.2 #> Camaro Z28          13.3 #> Pontiac Firebird    19.2 #> Fiat X1-9           27.3 #> Porsche 914-2       26.0 #> Lotus Europa        30.4 #> Ford Pantera L      15.8 #> Ferrari Dino        19.7 #> Maserati Bora       15.0 #> Volvo 142E          21.4  # Selecting the target variable and additional columns target_df(mtcars, \"mpg\", cyl, disp) #>                      mpg cyl  disp #> Mazda RX4           21.0   6 160.0 #> Mazda RX4 Wag       21.0   6 160.0 #> Datsun 710          22.8   4 108.0 #> Hornet 4 Drive      21.4   6 258.0 #> Hornet Sportabout   18.7   8 360.0 #> Valiant             18.1   6 225.0 #> Duster 360          14.3   8 360.0 #> Merc 240D           24.4   4 146.7 #> Merc 230            22.8   4 140.8 #> Merc 280            19.2   6 167.6 #> Merc 280C           17.8   6 167.6 #> Merc 450SE          16.4   8 275.8 #> Merc 450SL          17.3   8 275.8 #> Merc 450SLC         15.2   8 275.8 #> Cadillac Fleetwood  10.4   8 472.0 #> Lincoln Continental 10.4   8 460.0 #> Chrysler Imperial   14.7   8 440.0 #> Fiat 128            32.4   4  78.7 #> Honda Civic         30.4   4  75.7 #> Toyota Corolla      33.9   4  71.1 #> Toyota Corona       21.5   4 120.1 #> Dodge Challenger    15.5   8 318.0 #> AMC Javelin         15.2   8 304.0 #> Camaro Z28          13.3   8 350.0 #> Pontiac Firebird    19.2   8 400.0 #> Fiat X1-9           27.3   4  79.0 #> Porsche 914-2       26.0   4 120.3 #> Lotus Europa        30.4   4  95.1 #> Ford Pantera L      15.8   8 351.0 #> Ferrari Dino        19.7   6 145.0 #> Maserati Bora       15.0   8 301.0 #> Volvo 142E          21.4   4 121.0"}]
