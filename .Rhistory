train_df <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
#create test df
test_df <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
#create model recipe
x_recipe <- lmkknn.metrics::create_recipe(train_df, target_variable="gear")
#generate new model recipe with kmin
x_spec_list <- lmkknn.metrics::create_spec_kmin(train_df, model_recipe=x_recipe, method="lm", target_variable="gear")
#extract model specifications
x_spec <- lmkknn.metrics::get_list_item(x_spec_list, n=1)
#create model fit
x_fit <- lmkknn.metrics::create_fit(x_recipe, x_spec, train_df)
#create model prediction
x_pred <- lmkknn.metrics::create_model_prediction(test_df, x_fit )
#get model metric value
x_metric <- get_metric(prediction_model, "rmse", "gear")
#get model metric value
x_metric <- get_metric(x_pred, "rmse", "gear")
?metrics
library(testthat)
library(dplyr)
library(yardstick)
#create train df
train_df <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
#create test df
test_df <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
#create model recipe
x_recipe <- lmkknn.metrics::create_recipe(train_df, target_variable="gear")
#generate new model recipe with kmin
x_spec_list <- lmkknn.metrics::create_spec_kmin(train_df, model_recipe=x_recipe, method="lm", target_variable="gear")
#extract model specifications
x_spec <- lmkknn.metrics::get_list_item(x_spec_list, n=1)
#create model fit
x_fit <- lmkknn.metrics::create_fit(x_recipe, x_spec, train_df)
#create model prediction
x_pred <- lmkknn.metrics::create_model_prediction(test_df, x_fit )
#get model metric value
x_metric <- get_metric(x_pred, "rmse", "gear")
x_metric
expect_error(lmkknn.metrics::get_metric(NULL,"rmse", "gear"), "prediction_model must be a dataframe!")
expect_error(lmkknn.metrics::get_metric(x_pred, NULL, "gear"), "Please input a valid metric")
NULL %in% c("rmse", "rsq", "mae")
expect_error(lmkknn.metrics::get_metric(x_pred, "lol", "gear"), "Please input a valid metric")
expect_error(lmkknn.metrics::get_metric(x_pred, "lol", "gear"), "Please input a valid metric")
class(x_metric)
expect_s3_class(x_metric, "numeric")
expect_s4_class(x_metric, "numeric")
expect_equal(inherits(x_metric, "numeric"), TRUE)
document()
load_all()
test()
test()
check()
library(devtools)
check()
train_df <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', "am")
test_df <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', "am")
metric_df <- create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
#' Create a dataframe of performance metrics for a prediction model
#'
#' @description
#' This function takes as input two data frames (train_df and test_df) that contain the training and test data for a prediction model, respectively. It also takes a character string specifying the performance metric to calculate (metric), a character string specifying the prediction model to use (method), an integer specifying the minimum number of neighbors to consider when using the "kknn" method (kmin), a character string specifying the name of the target variable in the data frames (target_variable), and a character vector specifying the names of the predictor variables in the data frames (predictors_vector). The function returns a data frame containing the specified performance metric, the predictor variables, the prediction model method, and the value of kmin (if applicable).
#'
#' @details
#' The function calculates the specified performance metric (rmse, rsq, or mae) for the prediction model specified by the method argument (lm or kknn). If the method argument is "kknn", the function uses the kmin argument to determine the minimum number of neighbors to consider. If the kmin argument is not specified or is set to "NA", the function uses the default value of 4. The function assumes that the target variable and predictor variables have already been identified in the data
#'
#'
#' @param train_df A data frame containing the training data for the prediction model
#' @param test_df A data frame containing the test data for the prediction model
#' @param metric A character string specifying the performance metric to calculate ("rmse", "rsq", or "mae")
#' @param method A character string specifying the prediction model to use ("lm" or "kknn")
#' @param kmin An integer specifying the minimum number of neighbors to consider when using the "kknn" method (ignored if "lm" method is used)
#' @param target_variable A character string specifying the name of the target variable in the data frames
#' @param predictors_vector A character vector specifying the names of the predictor variables in the data frames
#'
#' @return A data frame containing the specified performance metric, the predictor variables, the prediction model method, and the value of kmin (if applicable)
#' @export
#'
#' @include 07_get-metric.R
#' @include 08_str-collapse.R
#'
#' @examples
#' # Example 1: Using single variable regression with lm method
#' train_df <- target_df(mtcars[1:16, ], 'gear', "am")
#' test_df <- target_df(mtcars[17:32, ], 'gear', "am")
#' create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
#'
#' # Example 2: Using multi-variable regression with lm method
#' train_df <- target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
#' test_df <- target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
#' create_metric_df(train_df, test_df, metric = "rsq", method = "lm", target_variable = "gear", predictors_vector = c("am", "vs"))
#'
#' # Example 3: Using k-nearest neighbor method with optimal k
#' train_df <- target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
#' test_df <- target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
#' create_metric_df(train_df, test_df, metric = "mae", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
#'
#' # Example 4: Using k-nearest neighbor method with all k values
#' train_df <- target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
#' test_df <- target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
#' create_metric_df(train_df, test_df, metric = "rsq", method = "kknn", kmin = "all", target_variable = "gear", predictors_vector = c("am", "vs"))
#'
#' # Example 5: Using a different target variable
#' train_df <- target_df(mtcars[1:16, ], 'mpg', c("am", "vs"))
#' test_df <- target_df(mtcars[17:32, ], 'mpg', c("am", "vs"))
#' create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "mpg", predictors_vector = c("am", "vs"))
create_metric_df <- function(train_df, test_df, metric, method, kmin="NA", target_variable, predictors_vector){
#' Check if all variables are of correct class
#'
#' @param x a variable to be checked
#' @param cls a character vector specifying the expected class(es)
#'
#' @return invisible NULL if all variables are of the expected class
check_class <- function(x, cls) {
if (!all(sapply(x, function(y) class(y) %in% cls))) {
stop(paste("At least one", cls, "is of the wrong class."))
}
invisible(NULL)
}
check_class(list(train_df, test_df), "data.frame")
check_class(list(metric, method, target_variable), "character")
check_class(predictors_vector, "character")
#create train data, includes win rate and predictors
target_train_df <- target_df(df=train_df, target_variable, predictors_vector)
#create test data, includes win rate and predictors
target_test_df <- target_df(df=test_df, target_variable, predictors_vector)
#create model recipe
model_recipe <- create_recipe(target_df=target_train_df, target_variable=target_variable)
#apply create_spec_kmin function and obtain model specification and kmin (if applicable)
model_spec_kmin_list <- create_spec_kmin(df=target_train_df, model_recipe=model_recipe,
method=method, kmin=kmin, metric=metric,
target_variable=target_variable)
#extract model spec
model_spec <- get_list_item(model_spec_kmin_list, n=1)
#extract kmin
model_kmin <- get_list_item(model_spec_kmin_list, n=2)
#create model fit
model_fit <- create_fit(model_recipe, model_spec, target_train_df)
#create prediction model
model_pred <- create_model_prediction(target_test_df, model_fit)
#extract metric result
metric_result <- get_metric(prediction_model=model_pred, metric, target_variable)
#format predictors string
if (length(predictors_vector) > 1){ #if there is more than 1 predictor i.e, multi-variable regression
predictors_vector <- str_collapse(predictors_vector) #combine input arguments into a string
}
#print("metric df successful")
return (
data.frame(
outcome=target_variable,
predictor=predictors_vector,
metric=metric,
metric_value=metric_result,
method=method,
kmin=model_kmin
)
)
}
metric_df <- create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
document()
load_all()
library(devtools)
load_all()
expect_error(lmkknn.metrics::get_metric(NULL,"rmse", "gear"), "prediction_model must be a dataframe!")
expect_error(lmkknn.metrics::get_metric(x_pred, "lol", "gear"), "Please input a valid metric")
#create model prediction
x_pred <- lmkknn.metrics::create_model_prediction(test_df, x_fit )
#invalid metric
expect_error(train_df, test_df, metric = "lol", method = "lm", target_variable = "gear", predictors_vector = "am",
"prediction_model must be a dataframe!")
document()
load_all()
train_df <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', "am")
test_df <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', "am")
metric_df <- lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
#invalid metric
expect_error(train_df, test_df, metric = "lol", method = "lm", target_variable = "gear", predictors_vector = "am",
"prediction_model must be a dataframe!")
#invalid metric
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "lol", method = "lm", target_variable = "gear", predictors_vector = "am"),
"prediction_model must be a dataframe!")
#invalid metric
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "lol", method = "lm", target_variable = "gear", predictors_vector = "am"),
"Please input a valid metric")
document()
load_all()
library(testthat)
train_df <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', "am")
test_df <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', "am")
metric_df <- lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
#invalid metric
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "lol", method = "lm", target_variable = "gear", predictors_vector = "am"),
"Please input a valid metric")
#invalid method
expect_error(train_df, test_df, metric = "rmse", method = "rf", target_variable = "gear", predictors_vector = "am",
"Please input a valid metric")
#invalid method
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "rf", target_variable = "gear", predictors_vector = "am"),
"Please input a valid metric")
#invalid method
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "rf", target_variable = "gear", predictors_vector = "am"),
"Invalid method specified")
#invalid target variable
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "nope", predictors_vector = "am"),
"target_variable not found in prediction_model!")
#train_df not of class data.frame
expect_error(lmkknn.metrics::create_metric_df(2, test_df, metric = "rmse", method = "lm", target_variable = "nope", predictors_vector = "am"),
"At least one is of the wrong class.")
#train_df not of class data.frame
expect_error(lmkknn.metrics::create_metric_df(2, test_df, metric = "rmse", method = "lm", target_variable = "nope", predictors_vector = "am"),
"At least one data.frame is of the wrong class.")
o
#test_df not of class data.frame
expect_error(lmkknn.metrics::create_metric_df(train_df, 2, metric = "rmse", method = "lm", target_variable = "nope", predictors_vector = "am"),
"At least one data.frame is of the wrong class.")
#test_df not of class data.frame
expect_error(lmkknn.metrics::create_metric_df(train_df, 2, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am"),
"At least one data.frame is of the wrong class.")
expect_s3_class(metric_df, "data.frame")
metric_df
colnames(metric_df)
expect_equal(colnames(metric_df), c("outcome", "predictor", "metric", "metric_value", "method", "kmin"))
kmin <- metric_df %>% select(kmin) %>% pull()
expect_equal(kmin, "NA")
kmin_model <- lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "kknn", kmin=4, target_variable = "gear", predictors_vector = "am")
kmin_specified <- 4
kmin_model <- lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "kknn", kmin=kmin_specified, target_variable = "gear", predictors_vector = "am")
kmin <- metric_df %>% select(kmin) %>% pull()
expect_equal(kmin, kmin_specified)
kmin_specified <- 4
kmin_model <- lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "kknn", kmin=kmin_specified, target_variable = "gear", predictors_vector = "am")
kmin <- kmin_model %>% select(kmin) %>% pull()
expect_equal(kmin, kmin_specified)
document()
load_all)
load_all()
check()
check()
document()
load_all()
check()
library(testthat)
library(dplyr)
train_df <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', "am")
test_df <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', "am")
metric_df <- lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
#invalid metric
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "lol", method = "lm", target_variable = "gear", predictors_vector = "am"),
"Please input a valid metric")
#invalid method
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "rf", target_variable = "gear", predictors_vector = "am"),
"Invalid method specified")
#invalid target variable
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am"),
"target_variable not found in prediction_model!")
#invalid target variable
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am"),
"target_variable not found in prediction_model!")
create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
#invalid target variable
expect_error(lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "looooll", predictors_vector = "am"),
"target_variable not found in prediction_model!")
check()
test()
check()
library(devtools)
load_all()
check()
document()
load_all()
check()
train_df <- target_df(mtcars[1:16, ], 'gear', "am")
test_df <- target_df(mtcars[17:32, ], 'gear', "am")
test_df <- target_df(mtcars[17:32, ], 'gear', "am")
create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
train_df <- target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
test_df <- target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
create_metric_df(train_df, test_df, metric = "rsq", method = "lm", target_variable = "gear", predictors_vector = c("am", "vs"))
# Example 3: Using k-nearest neighbor method with optimal k
test_df <- target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
create_metric_df(train_df, test_df, metric = "mae", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
train_df <- target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
test_df <- target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
create_metric_df(train_df, test_df, metric = "rsq", method = "kknn", kmin = "all", target_variable = "gear", predictors_vector = c("am", "vs"))
create_metric_df(train_df, test_df, metric = "rsq", method = "kknn", kmin = "NA", target_variable = "gear", predictors_vector = c("am", "vs"))
train_df <- target_df(mtcars[1:16, ], 'mpg', c("am", "vs"))
test_df <- target_df(mtcars[17:32, ], 'mpg', c("am", "vs"))
create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "mpg", predictors_vector = c("am", "vs"))
check()
library(devtools)
document()
load_all()
check()
train_df <- target_df(mtcars[1:16, ], 'gear', "am")
test_df <- target_df(mtcars[17:32, ], 'gear', "am")
create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
train_df <- target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
test_df <- target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
create_metric_df(train_df, test_df, metric = "rsq", method = "lm", target_variable = "gear", predictors_vector = c("am", "vs"))
train_df <- target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
test_df <- target_df(mtcars[17:32, ], 'gear', c("am", "vs"))
create_metric_df(train_df, test_df, metric = "mae", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
train_df <- target_df(mtcars[1:16, ], 'mpg', c("am", "vs"))
test_df <- target_df(mtcars[17:32, ], 'mpg', c("am", "vs"))
create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "mpg", predictors_vector = c("am", "vs"))
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
train_df <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', c("am", "vs")
test_df <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', c("am", "vs")
train_df
lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
train_df <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', "am", "vs")
test_df <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', "am", "vs")
train_df
lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
lmkknn.metrics::create_metric_df(train_df, test_df, metric = "rmse", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
document()
load_all()
check()
lmkknn.metrics::create_metric_df(x_test, x_test, metric = "rmse", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
x_train <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', "am", "vs")
x_test <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', "am", "vs")
lmkknn.metrics::create_metric_df(x_test, x_test, metric = "rmse", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
document()
load_all()
document()
check()
str_collapse("my name")
str_collapse(c("my name", "is", "jake"))
str_collapse(c("my name", "is", 2))
str_collapse(c(3, 2, "boy"))
#'
#' @return A data frame containing the specified performance metric, the predictor variables, the prediction model method, and the value of kmin i"f applicable"
#' @export
#'
#' @include 07_get-metric.R
#' @include 08_str-collapse.R
#'
#' @examples
x_train <- lmkknn.metrics::target_df(mtcars[1:16, ], 'gear', "am", "vs")
x_test <- lmkknn.metrics::target_df(mtcars[17:32, ], 'gear', "am", "vs")
lmkknn.metrics::create_metric_df(x_train, x_test, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
lmkknn.metrics::create_metric_df(x_test, x_test, metric = "rmse", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
document()
load_all()
check()
document()
load_all()
check()
data(mtcars)
train_df <- target_df(mtcars[1:16, ], 'gear', "am")
test_df <- target_df(mtcars[17:32, ], 'gear', "am")
train_df
train_df <- target_df(mtcars[1:16, ], 'gear', "am", "vs)
train_df <- target_df(mtcars[1:16, ], 'gear', "am", "vs")
test_df <- target_df(mtcars[17:32, ], 'gear', "am", "vs")
create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
test_df <- target_df(mtcars[17:32, ], 'gear', "am", "vs")
create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
train_df <- target_df(mtcars[1:16, ], 'gear', c("am", "vs"))
create_metric_df(train_df, test_df, metric = "mae", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
document()
load_all()
document()
library(devtools)
load_all()
check()
test()
?check
# Load data
data(mtcars)
# Example 1: Using single variable regression with lm method
train_df <- target_df(mtcars[1:16, ], 'gear', "am", "vs")
test_df <- target_df(mtcars[17:32, ], 'gear', "am", "vs")
create_metric_df(train_df, test_df, metric = "rmse", method = "lm", target_variable = "gear", predictors_vector = "am")
# Example 2: Using k-nearest neighbor method with optimal k
create_metric_df(train_df, test_df, metric = "mae", method = "kknn", kmin = 3, target_variable = "gear", predictors_vector = c("am", "vs"))
document()
load_all()
check()
library(devtools)
check()
if (length(predictors_vector) > 1){ #if there is more than 1 predictor i.e, multi-variable regression
predictors_vector <- str_collapse(predictors_vector) #combine input arguments into a string
}
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
?seq_along
?unnest
#invalid metric
expect_error(metric_bind(train_df=train_df, test_df=test_df, metric="loool", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors),
"Please input a valid metric")
document()
load_all()
#invalid metric
expect_error(lmkknn.metrics::metric_bind(train_df=train_df, test_df=test_df, metric="loool", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors),
"Please input a valid metric")
library(testthat)
library(data.table)
# load data
data(mtcars)
train_df <- mtcars[1:16, ] #create train df
test_df <- mtcars[17:32, ] #create test df
#invalid metric
expect_error(lmkknn.metrics::metric_bind(train_df=train_df, test_df=test_df, metric="loool", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors),
"Please input a valid metric")
single_predictors <- list("mpg", "cyl", "disp", "hp", "am") #single predictors list
multiple_predictors <- list(c("mpg", "cyl"), c("disp", "am"), c("cyl", "am") )
#invalid metric
expect_error(lmkknn.metrics::metric_bind(train_df=train_df, test_df=test_df, metric="loool", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors),
"Please input a valid metric")
# Check if all variables are of correct class
check_class <- function(x, cls) {
if (!all(sapply(x, function(y) class(y) %in% cls))) {
stop(paste("At least one", cls, "is of the wrong class."))
}
invisible(NULL)
}
check_class(single_predictors, "list")
class(single_predictors)
inherit(single_predictors, "list")
?inherit
inherits(single_predictors, "list")
document()
load_all()
#invalid metric
expect_error(lmkknn.metrics::metric_bind(train_df=train_df, test_df=test_df, metric="loool", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors),
"Please input a valid metric")
#invalid method
expect_error(lmkknn.metrics::metric_bind(train_df=train_df, test_df=test_df, metric="rmse", method="rf", kmin="NA", target_variable='gear', model_list=single_predictors),
"Invalid method specified")
#invalid target variable
expect_error(lmkknn.metrics::metric_bind(train_df=train_df, test_df=test_df, metric="rmse", method="lm", kmin="NA", target_variable='ball', model_list=single_predictors),
"target_variable not found in prediction_model!")
#train_df not of class data.frame
expect_error(lmkknn.metrics::metric_bind(train_df=c(2, 2, 2), test_df=test_df, metric="rmse", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors),
"At least one data.frame is of the wrong class.")
#test_df not of class data.frame
expect_error(lmkknn.metrics::metric_bind(train_df=train_df, test_df=c(2, 2, 2), metric="rmse", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors),
"At least one data.frame is of the wrong class.")
#model list is not a list
expect_error(lmkknn.metrics::metric_bind(train_df=train_df, test_df=test_df, metric="rmse", method="lm", kmin="NA", target_variable='gear', model_list=c(2, 2, 2)),
"model_list must be a list!")
metric_bind(train_df=train_df, test_df=test_df, metric="rmse", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors)
metric_df <- metric_bind(train_df=train_df, test_df=test_df, metric="rmse", method="lm", kmin="NA", target_variable='gear', model_list=single_predictors)
expect_s3_class(metric_df, "data.frame")
metric_df$predictor
expect_equal(list(metric$df), single_predictors)
expect_equal(list(metric_df$predictor), single_predictors)
list(metric_df$predictor)
metric_df %>% select(predictor) %>% pull()
metric_df %>% select(predictor) %>% pull() %>% list()
single_predictors
unlist(single_predictors)
c(metric_df$predictor)
expect_equal(c(metric_df$predictor), unlist(single_predictors))
expect_equal(nrow(metric_df), length(single_predictors))
document()
load_all()
check()
install()
library(lmkknn.metrics)
?lmkknn.metrics
install.packages("pkgdown")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
pkgdown::build_site()
check()
use_readme_rmd()
document()
load_all()
install()
devtools::build_readme()
use_readme_rmd()
build_readme()
#> ℹ Installing regexcite in temporary library
#> ℹ Building '/tmp/RtmpRJNP3a/regexcite/README.Rmd'
check()
install()
library(devtools)
usethis::use_github_action("check-release")
usethis::use_github_action("test-coverage")
git push
library(devtools)
check()
document()
load_all()
check()
document()
load_all()
check()
library(testthat)
# Test case 1: Check if the function correctly collapses a single string
test_that("str_collapse correctly collapses a single string", {
input <- "my name"
expected_output <- "my name"
output <- str_collapse(input)
expect_equal(output, expected_output)
})
